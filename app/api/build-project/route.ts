import { NextResponse } from "next/server";

export async function POST(request: Request) {
  const { scaffold } = await request.json();

  try {
    if (!scaffold || typeof scaffold !== "string") {
      return NextResponse.json({
        success: false,
        message: "Invalid scaffold data provided.",
      });
    }

    // Extract a simplified repository name from the scaffold
    const repoName = scaffold
      .split(":")[1]?.trim() // Extract the project idea from "Project Scaffold: ..."
      ?.toLowerCase()
      ?.replace(/[^a-z0-9]+/g, "-") // Replace non-alphanumeric characters with hyphens
      ?.replace(/^-+|-+$/g, ""); // Remove leading/trailing hyphens

    if (!repoName) {
      return NextResponse.json({
        success: false,
        message: "Failed to generate a valid repository name.",
      });
    }

    // GitHub API: Create a new repository
    const repoResponse = await fetch("https://api.github.com/user/repos", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.GITHUB_PERSONAL_ACCESS_TOKEN}`, // Add your GitHub token to .env
      },
      body: JSON.stringify({
        name: repoName,
        description: "A project generated by the AI Project Spawner.",
        private: false,
      }),
    });

    if (!repoResponse.ok) {
      const error = await repoResponse.json();
      return NextResponse.json({
        success: false,
        message: `Failed to create GitHub repository: ${error.message}`,
      });
    }

    const repoData = await repoResponse.json();

    // Push the scaffold to the repository as a README
    const readmeContent = `
# ${repoName.replace(/-/g, " ").toUpperCase()}

## Description
${scaffold}

This project was generated by the AI Project Spawner.
`;

    const contentResponse = await fetch(
      `https://api.github.com/repos/${repoData.owner.login}/${repoData.name}/contents/README.md`,
      {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${process.env.GITHUB_PERSONAL_ACCESS_TOKEN}`,
        },
        body: JSON.stringify({
          message: "Add README",
          content: Buffer.from(readmeContent).toString("base64"), // Encode README as Base64
        }),
      }
    );

    if (!contentResponse.ok) {
      const error = await contentResponse.json();
      return NextResponse.json({
        success: false,
        message: `Failed to push README to GitHub: ${error.message}`,
      });
    }

    return NextResponse.json({
      success: true,
      message: `Project successfully created on GitHub! Repository: https://github.com/${repoData.owner.login}/${repoData.name}`,
    });
  } catch (error) {
    console.error("Error building project:", error);
    return NextResponse.json({
      success: false,
      message: "An error occurred while building the project.",
    });
  }
}